{"version":3,"sources":["utils/headers.ts","utils/searchCategories.ts","utils/searchUsers.ts","icons/Category.svg","components/navbar/queryResult/categoryItem/CategoryItem.tsx","hooks/useClickOutside.ts","components/navbar/queryResult/userItem/UserItem.tsx","components/navbar/Navbar.tsx","utils/getGames.ts","components/topGames/topGame/TopGame.tsx","components/topGames/TopGames.tsx","utils/getStreamers.ts","utils/getUser.ts","utils/readableDate.ts","components/channelInfo/ChannelInfo.tsx","components/topStreamers/topStream/TopStream.tsx","components/topStreamers/TopStreamers.tsx","components/home/Home.tsx","components/streamersForGame/StreamersForGame.tsx","components/liveStream/LiveStream.tsx","components/App.tsx","index.tsx"],"names":["headers","Headers","process","Authorization","searchCategories","query","cursor","a","console","log","url","fetch","method","res","json","result","searchUsers","CategoryItem","id","name","box_art_url","to","className","src","alt","useClickOutside","ref","setOpen","useEffect","handleClickOutside","event","current","contains","target","window","addEventListener","removeEventListener","UserItem","display_name","game_name","game_id","is_live","icon","userIcon","Navbar","useState","option","setOption","open","setCursor","setQuery","searchResult","setSearchResult","wrapperRef","useRef","debouncedSearch","useCallback","debounce","data","length","map","usr","cat","twitchIcon","onClick","type","placeholder","onChange","e","value","handleChange","htmlFor","searchIcon","Grid","component","container","alignItems","spacing","item","categoryIcon","Switch","checked","getGames","TopGame","loading","TopGames","topGamesList","setTopGamesList","len","setLen","fetchGames","pagination","top","game","replace","dataLength","next","hasMore","loader","endMessage","style","textAlign","getStreamers","gameId","getUser","user_id","readableDate","date","year","getFullYear","month","getMonth","day","getDay","ChannelInfo","setIcon","user","setUser","setDate","profile","Date","created_at","profileSVG","fetchUser","closeSVG","profile_image_url","broadcaster_type","view_count","description","TopStream","language","thumbnail_url","title","user_login","viewer_count","setProfile","fetchProfile","TopStreamers","GameId","useParams","topStreamersList","setTopStreamersList","fetchStreams","stream","Home","visibleGames","setVisibleGames","setVisiblePlayers","StreamersForGame","GameName","LiveStream","Name","channel","theme","width","height","muted","withChat","onVideoPause","App","exact","from","path","render","props","match","params","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.20f81ad7.chunk.js","sourcesContent":["const clientId = process.env.REACT_APP_CLIENT_ID;\nconst oauthCode = process.env.REACT_APP_OAUTH_CODE;\nexport const headers = new Headers({\n  \"Client-ID\": clientId!,\n  Authorization: `Bearer ${oauthCode}`,\n});\n","import { headers } from \"./headers\";\nexport interface ResultTypes {\n  data: [\n    {\n      id: string;\n      name: string;\n      box_art_url: string;\n    }\n  ];\n  pagination: {\n    cursor: string;\n  };\n}\nexport const searchCategories = async (\n  query: string,\n  cursor: string\n): Promise<ResultTypes> => {\n  console.log(\"Search categories\");\n  let url = `https://api.twitch.tv/helix/search/categories?query=${query}&first=40`;\n  if (cursor) {\n    url += `&after=${cursor}`;\n  }\n  const res = await fetch(url, {\n    method: \"GET\",\n    headers,\n  });\n  const result = await res.json();\n  return result;\n};\n","import { headers } from \"./headers\";\nexport interface ResultTypes {\n  data: [\n    {\n      broadcaster_language: string;\n      broadcaster_login: string;\n      display_name: string;\n      game_id: string;\n      game_name: string;\n      id: string;\n      is_live: boolean;\n      tag_ids: string[];\n      thumbnail_url: string;\n      title: string;\n      started_at: string;\n    }\n  ];\n  pagination: {\n    cursor: string;\n  };\n}\nexport const searchUsers = async (\n  query: string,\n  cursor: string\n): Promise<ResultTypes> => {\n  console.log(\"Search users\");\n  let url = `https://api.twitch.tv/helix/search/channels?query=${query}&first=40`;\n  if (cursor) {\n    url += `&after=${cursor}`;\n  }\n  const res = await fetch(url, {\n    method: \"GET\",\n    headers,\n  });\n  const result = await res.json();\n  return result;\n};\n","export default __webpack_public_path__ + \"static/media/Category.6745fb12.svg\";","import { Link } from \"react-router-dom\";\n\nexport interface CategoryItemProps {\n  id: string;\n  name: string;\n  box_art_url: string;\n}\nexport const CategoryItem: React.FC<CategoryItemProps> = ({\n  id,\n  name,\n  box_art_url,\n}) => {\n  return (\n    <>\n      {/* redirect is for infinite scroll to update instead of adding items to the end */}\n      <Link to={`${process.env.PUBLIC_URL}/redirect/${name}/${id}`}>\n        <div className=\"categoryItems__item\">\n          <img\n            className=\"categoryItems__item__img\"\n            src={box_art_url}\n            alt=\"Category\"\n          />\n          <div className=\"categoryItems__item__name\">{name}</div>\n        </div>\n      </Link>\n    </>\n  );\n};\n","import { useEffect } from \"react\";\nexport const useClickOutside = (\n  ref: React.MutableRefObject<any>,\n  setOpen: React.Dispatch<React.SetStateAction<boolean>>\n) => {\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent | TouchEvent) => {\n      if (ref.current && !ref.current.contains(event.target)) {\n        setOpen(false);\n      }\n    };\n    window.addEventListener(\"mousedown\", handleClickOutside);\n    window.addEventListener(\"touchstart\", handleClickOutside);\n    return () => {\n      window.removeEventListener(\"mousedown\", handleClickOutside);\n      window.removeEventListener(\"touchstart\", handleClickOutside);\n    };\n  }, [ref, setOpen]);\n};\n","import { Icon } from \"@iconify/react\";\nimport userIcon from \"@iconify-icons/bx/bx-user\";\nimport { Link } from \"react-router-dom\";\n\nexport interface UserItemProps {\n  display_name: string;\n  game_id: string;\n  game_name: string;\n  id: string;\n  is_live: boolean;\n}\nexport const UserItem: React.FC<UserItemProps> = ({\n  display_name,\n  game_id,\n  game_name,\n  id,\n  is_live,\n}) => {\n  return (\n    <>\n      {is_live ? (\n        <Link to={`${process.env.PUBLIC_URL}/Streamer/${display_name}`}>\n          <div className=\"userItems__item\">\n            <Icon className=\"userItems__item__icon\" icon={userIcon} />\n            <div className=\"userItems__item__desc\">\n              <div className=\"userItems__item__desc__top\">\n                <div className=\"userItems__item__desc__top__name\">\n                  {display_name}\n                </div>\n                <div className=\"userItems__item__desc__top__dot\"></div>\n              </div>\n              <div className=\"userItems__item__desc__game\">\n                Playing {game_name}\n              </div>\n            </div>\n          </div>\n        </Link>\n      ) : (\n        <div className=\"userItems__item--short\">\n          <Icon className=\"userItems__item__icon\" icon={userIcon} />\n          <div className=\"userItems__item__desc__top__name\">{display_name}</div>\n        </div>\n      )}\n    </>\n  );\n};\n","import { useState, useEffect, useCallback, useRef } from \"react\";\nimport {\n  searchCategories,\n  ResultTypes as CategoryTypes,\n} from \"../../utils/searchCategories\";\nimport { searchUsers, ResultTypes as UserTypes } from \"../../utils/searchUsers\";\nimport { debounce } from \"lodash\";\nimport { Link } from \"react-router-dom\";\nimport { Icon } from \"@iconify/react\";\nimport searchIcon from \"@iconify-icons/akar-icons/search\";\nimport twitchIcon from \"@iconify-icons/bi/twitch\";\nimport categoryIcon from \"../../icons/Category.svg\";\nimport userIcon from \"@iconify-icons/bx/bx-user\";\nimport {\n  CategoryItem,\n  CategoryItemProps as CategoryItemTypes,\n} from \"./queryResult/categoryItem/CategoryItem\";\nimport { useClickOutside } from \"../../hooks/useClickOutside\";\nimport {\n  UserItem,\n  UserItemProps as UserItemTypes,\n} from \"./queryResult/userItem/UserItem\";\nimport Switch from \"@material-ui/core/Switch\";\nimport Grid from \"@material-ui/core/Grid\";\n\nexport const Navbar = () => {\n  type resType = UserTypes | CategoryTypes | { data: [] };\n  const [option, setOption] = useState(false);\n  const [open, setOpen] = useState(true);\n  const [cursor, setCursor] = useState(\"\");\n  const [query, setQuery] = useState(\"\");\n  const [searchResult, setSearchResult] = useState<JSX.Element | null>(null);\n  const wrapperRef = useRef(null);\n  useClickOutside(wrapperRef, setOpen);\n\n  const handleChange = (e: React.ChangeEvent<any>) => {\n    setQuery(e.target.value);\n    if (cursor !== \"\") {\n      setCursor(\"\");\n    }\n  };\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const debouncedSearch = useCallback(\n    debounce(async (query: string, cursor: string, option: boolean) => {\n      setSearchResult(null);\n      let res: resType = { data: [] };\n      if (query.length > 0 && option === true) {\n        res = await searchUsers(query, cursor);\n        if (res?.data?.length > 0) {\n          setSearchResult(\n            <div className=\"userItems\">\n              {res.data.map((usr: UserItemTypes) => {\n                return (\n                  <UserItem\n                    key={usr.id}\n                    id={usr.id}\n                    display_name={usr.display_name}\n                    game_name={usr.game_name}\n                    game_id={usr.game_id}\n                    is_live={usr.is_live}\n                  />\n                );\n              })}\n            </div>\n          );\n        }\n      } else if (query.length > 0) {\n        res = await searchCategories(query, cursor);\n        if (res?.data?.length > 0) {\n          setSearchResult(\n            <div className=\"categoryItems\">\n              {res.data.map((cat: CategoryItemTypes) => {\n                return (\n                  <CategoryItem\n                    key={cat.id}\n                    id={cat.id}\n                    name={cat.name}\n                    box_art_url={cat.box_art_url}\n                  />\n                );\n              })}\n            </div>\n          );\n        }\n      }\n    }, 500),\n    []\n  );\n  useEffect(() => {\n    debouncedSearch(query, cursor, option);\n  }, [query, cursor, debouncedSearch, option]);\n  return (\n    <div className=\"navbar\">\n      <Link className=\"navbar__twitch\" to={`${process.env.PUBLIC_URL}/`}>\n        <Icon icon={twitchIcon} />\n      </Link>\n      <div className=\"navbar__search\" ref={wrapperRef}>\n        <div className=\"navbar__search__mid\">\n          <div\n            className=\"navbar__search__mid__searchDiv\"\n            onClick={() => setOpen(true)}\n          >\n            <input\n              type=\"text\"\n              className=\"navbar__search__mid__searchDiv__input\"\n              placeholder=\"Search\"\n              onChange={(e) => handleChange(e)}\n              value={query}\n              id=\"input\"\n            ></input>\n\n            <label htmlFor=\"input\">\n              <div className=\"navbar__search__mid__searchDiv__icon\">\n                <Icon\n                  icon={searchIcon}\n                  className=\"navbar__search__mid__searchDiv__icon__svg\"\n                />\n              </div>\n            </label>\n          </div>\n          {open ? searchResult : \"\"}\n        </div>\n        <Grid component=\"label\" container alignItems=\"center\" spacing={1}>\n          <Grid item>\n            <img className=\"categoryIcon\" src={categoryIcon} alt=\"category\" />\n          </Grid>\n          <Grid item>\n            <Switch\n              checked={option}\n              onClick={() => setOpen(true)}\n              onChange={() => setOption(!option)}\n            />\n          </Grid>\n          <Grid item >\n            <Icon  className=\"userIcon\" icon={userIcon} />\n          </Grid>\n        </Grid>\n      </div>\n    </div>\n  );\n};\n","import { headers } from \"./headers\";\n\ninterface ResultTypes {\n  data: [\n    {\n      id: string;\n      name: string;\n      box_art_url: string;\n    }\n  ];\n  pagination: { cursor: string };\n}\nexport const getGames = async (cursor: string): Promise<ResultTypes> => {\n  console.log(\"Get Games\");\n  let url = \"https://api.twitch.tv/helix/games/top?first=100\";\n  if (cursor) {\n    url = `${url}&after=${cursor}`;\n  }\n  const res = await fetch(url, {\n    method: \"GET\",\n    headers,\n  });\n  const result = await res.json();\n  return result;\n};\n","import { Link } from \"react-router-dom\";\ninterface Props {\n  id: string;\n  name: string;\n  box_art_url: string;\n}\nexport const TopGame: React.FC<Props> = ({ id, name, box_art_url }) => {\n  return (\n    <div className=\"topGames__game\">\n      <Link to={`${process.env.PUBLIC_URL}/StreamersForGame/${name}/${id}`}>\n        <img\n          src={box_art_url}\n          loading=\"lazy\"\n          alt=\"game\"\n          className=\"topGames__game__img\"\n        />\n      </Link>\n      <div className=\"topGames__game__name\">\n        <Link to={`${process.env.PUBLIC_URL}/StreamersForGame/${name}/${id}`}>\n          <span className=\"topGames__game__name__text\">{name}</span>\n        </Link>\n      </div>\n    </div>\n  );\n};\n","import { useState, useEffect } from \"react\";\nimport { getGames } from \"../../utils/getGames\";\nimport { TopGame } from \"./topGame/TopGame\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nexport const TopGames = () => {\n  const [topGamesList, setTopGamesList] = useState<any>([]);\n  const [cursor, setCursor] = useState(\"\");\n  const [len, setLen] = useState(0);\n  const fetchGames = async () => {\n    const res = await getGames(cursor);\n    setCursor(res.pagination.cursor);\n    const top = res.data;\n    setLen(len + top.length);\n    setTopGamesList([\n      ...topGamesList,\n      top.map((game: { id: string; name: string; box_art_url: string }) => {\n        return (\n          <TopGame\n            key={game.id}\n            id={game.id}\n            name={game.name}\n            box_art_url={game.box_art_url\n              .replace(\"{width}\", \"220\")\n              .replace(\"{height}\", \"325\")}\n          />\n        );\n      }),\n    ]);\n    return topGamesList;\n  };\n  useEffect(() => {\n    fetchGames();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <>\n      <InfiniteScroll\n        className=\"topGames\"\n        dataLength={len}\n        next={fetchGames}\n        hasMore={true}\n        loader={<h4>Loading...</h4>}\n        endMessage={\n          <p style={{ textAlign: \"center\" }}>\n            <b>Yay! You have seen it all</b>\n          </p>\n        }\n      >\n        {topGamesList}\n      </InfiniteScroll>\n    </>\n  );\n};\n","import { headers } from \"./headers\";\n\ninterface ResultTypes {\n  data: [\n    {\n      game_name: string;\n      language: string;\n      thumbnail_url: string;\n      title: string;\n      user_login: string;\n      viewer_count: number;\n      user_id: string;\n    }\n  ];\n  pagination: {\n    cursor: string;\n  };\n}\nexport const getStreamers = async (\n  cursor: string,\n  gameId?: string\n): Promise<ResultTypes> => {\n  console.log(\"Get Streamers\");\n  let url = \"https://api.twitch.tv/helix/streams?first=40\";\n  if (cursor) {\n    url = \"https://api.twitch.tv/helix/streams?first=70\";\n    url += `&after=${cursor}`;\n  }\n  if (gameId) {\n    url += `&game_id=${gameId}`;\n  }\n  const res = await fetch(url, {\n    method: \"GET\",\n    headers,\n  });\n  const result = await res.json();\n  return result;\n};\n","import { headers } from \"./headers\";\n\ninterface ResultTypes {\n  data: [\n    {\n      id: string;\n      login: string;\n      display_name: string;\n      type: string;\n      broadcaster_type: string;\n      description: string;\n      profile_image_url: string;\n      offline_image_url: string;\n      view_count: number;\n      email: string;\n      created_at: string;\n    }\n  ];\n}\nexport const getUser = async (user_id: string) => {\n  console.log(\"Get User\");\n  const url = `https://api.twitch.tv/helix/users?id=${user_id}`;\n  const res = await fetch(url, {\n    method: \"GET\",\n    headers,\n  });\n  const result: ResultTypes = await res.json();\n  return result.data[0];\n};\n","export const readableDate = (date: Date): string => {\n  const monthNames = [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n  ];\n  const year = date.getFullYear();\n  const month = monthNames[date.getMonth()];\n  const day = date.getDay();\n  return `Joined ${day === 0 ? 1 : day} ${month} ${year}`;\n};\n","import { useState, useEffect, useRef } from \"react\";\nimport { getUser } from \"../../utils/getUser\";\nimport { readableDate } from \"../../utils/readableDate\";\nimport { useClickOutside } from \"../../hooks/useClickOutside\";\nimport { Icon } from \"@iconify/react\";\nimport profileSVG from \"@iconify-icons/ant-design/profile-outlined\";\nimport closeSVG from \"@iconify-icons/bi/x-lg\";\n\ninterface Props {\n  user_id: string;\n}\ninterface UserTypes {\n  profile_image_url: string;\n  display_name: string;\n  broadcaster_type: string;\n  view_count: number;\n  description: string;\n}\nexport const ChannelInfo: React.FC<Props> = ({ user_id }) => {\n  const [open, setOpen] = useState(false);\n  const [icon, setIcon] = useState<JSX.Element>();\n  const [user, setUser] = useState<UserTypes>();\n  const [date, setDate] = useState(\"\");\n  const profile = useRef(null);\n  useEffect(() => {\n    const fetchUser = async () => {\n      const res = await getUser(user_id);\n      setUser(res);\n      setDate(readableDate(new Date(res.created_at)));\n      setOpen(true);\n      setIcon(<Icon className=\"profileIcon__svg\" icon={profileSVG} />);\n    };\n    fetchUser();\n  }, [user_id]);\n  useClickOutside(profile, setOpen);\n  return (\n    <>\n      {open ? (\n        <div\n          className={open ? \"channelInfo\" : \"channelInfo--closed\"}\n          id=\"channelInfo\"\n          ref={profile}\n        >\n          <div className=\"channelInfo__close\" onClick={() => setOpen(false)}>\n            <Icon className=\"channelInfo__close__svg\" icon={closeSVG} />\n          </div>\n          <div className=\"channelInfo__top\">\n            <div className=\"channelInfo__top__image\">\n              <img\n                className=\"channelInfo__top__image__img\"\n                src={user?.profile_image_url}\n                alt=\"profile\"\n              />\n            </div>\n            <div className=\"channelInfo__top__info\">\n              <div className=\"channelInfo__top__info__name\">\n                {user?.display_name}\n              </div>\n              <div className=\"channelInfo__top__info__type\">\n                {user?.broadcaster_type}\n              </div>\n              <div className=\"channelInfo__top__info__views\">\n                {user?.view_count} views\n              </div>\n              <div className=\"channelInfo__top__info__created\">{date}</div>\n            </div>\n          </div>\n          <div className=\"channelInfo__description\">\n            <div className=\"\">{user?.description}</div>\n          </div>\n        </div>\n      ) : (\n        <div\n          className={\"profileIcon\"}\n          onClick={() => setOpen(true)}\n        >\n          {icon}\n        </div>\n      )}\n    </>\n  );\n};\n","import { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { ChannelInfo } from \"../../channelInfo/ChannelInfo\";\n\nexport interface StreamProps {\n  game_name: string;\n  language: string;\n  thumbnail_url: string;\n  title: string;\n  user_login: string;\n  viewer_count: number;\n  user_id: string;\n}\n\nexport const TopStream: React.FC<StreamProps> = ({\n  game_name,\n  language,\n  thumbnail_url,\n  title,\n  user_login,\n  viewer_count,\n  user_id,\n}) => {\n  const [profile, setProfile] = useState<JSX.Element>();\n  const fetchProfile = async () => {\n    if (!profile) {\n      setProfile(<ChannelInfo user_id={user_id} />);\n    }\n  };\n\n  return (\n    <>\n      <div className=\"topStreamers__stream\">\n        {profile ? profile : \"\"}\n\n        <Link to={`${process.env.PUBLIC_URL}/Streamer/${user_login}`}>\n          <div className=\"topStreamers__stream__thumbnail\">\n            <img\n              className=\"topStreamers__stream__thumbnail__img\"\n              src={thumbnail_url}\n              loading=\"lazy\"\n              alt=\"thumbnail\"\n            />\n            <div className=\"topStreamers__stream__thumbnail__count\">\n              {viewer_count} widzów\n            </div>\n          </div>\n        </Link>\n        <div className=\"topStreamers__stream__info\">\n          <div className=\"topStreamers__stream__info__title\">{title}</div>\n          <div className=\"topStreamers__stream__info__username\">\n            <p\n              onClick={fetchProfile}\n              className=\"topStreamers__stream__info__username__text\"\n            >\n              {user_login}\n            </p>\n          </div>\n          <div className=\"topStreamers__stream__info__game\">{game_name}</div>\n          <div className=\"topStreamers__stream__info__language\">{language}</div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import { useState, useEffect } from \"react\";\nimport { getStreamers } from \"../../utils/getStreamers\";\nimport { TopStream, StreamProps } from \"./topStream/TopStream\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { useParams } from \"react-router-dom\";\n\ninterface ParamTypes {\n  GameName: string;\n  GameId: string;\n}\nexport const TopStreamers = () => {\n  const { GameId } = useParams<ParamTypes>();\n  const [cursor, setCursor] = useState(\"\");\n  const [len, setLen] = useState(0);\n  const [topStreamersList, setTopStreamersList] = useState<any>([]);\n  const fetchStreams = async () => {\n    const res = await getStreamers(cursor, GameId);\n    setCursor(await res.pagination.cursor);\n    const top = await res.data;\n    setLen(len + top.length);\n    setTopStreamersList([\n      ...topStreamersList,\n      top.map((stream: StreamProps) => {\n        return (\n          <TopStream\n            key={stream.user_login}\n            game_name={stream.game_name}\n            language={stream.language}\n            thumbnail_url={stream.thumbnail_url\n              .replace(\"{width}\", \"450\")\n              .replace(\"{height}\", \"254\")}\n            title={stream.title}\n            user_login={stream.user_login}\n            viewer_count={stream.viewer_count}\n            user_id={stream.user_id}\n          />\n        );\n      }),\n    ]);\n  };\n  useEffect(() => {\n    fetchStreams();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return (\n    <>\n      <InfiniteScroll\n        className=\"topStreamers\"\n        dataLength={len}\n        next={fetchStreams}\n        hasMore={true}\n        loader={<h4>Loading...</h4>}\n        endMessage={\n          <p style={{ textAlign: \"center\" }}>\n            <b>Yay! You have seen it all</b>\n          </p>\n        }\n      >\n        {topStreamersList}\n      </InfiniteScroll>\n    </>\n  );\n};\n","import { useState } from \"react\";\nimport { TopGames } from \"../topGames/TopGames\";\nimport { TopStreamers } from \"../topStreamers/TopStreamers\";\n\nexport const Home = () => {\n  const [visibleGames, setVisibleGames] = useState(true);\n  const [, setVisiblePlayers] = useState(false);\n  const handleClickGames = () => {\n    setVisiblePlayers(false);\n    setVisibleGames(true);\n  };\n  const handleClickPlayers = () => {\n    setVisibleGames(false);\n    setVisiblePlayers(true);\n  };\n  return (\n    <div>\n      <div className=\"button\">\n        <div className=\"button__option\" onClick={handleClickGames}>\n          Kategorie\n        </div>\n        <div className=\"button__option\" onClick={handleClickPlayers}>\n          Kanały na żywo\n        </div>\n      </div>\n      {visibleGames ? <TopGames /> : <TopStreamers />}\n    </div>\n  );\n};\n","import { useState, useEffect } from \"react\";\nimport { getStreamers } from \"../../utils/getStreamers\";\nimport { TopStream, StreamProps } from \"../topStreamers/topStream/TopStream\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { useParams } from \"react-router-dom\";\n\ninterface ParamTypes {\n  GameName: string;\n  GameId: string;\n}\nexport const StreamersForGame = () => {\n  const { GameName, GameId } = useParams<ParamTypes>();\n  const [cursor, setCursor] = useState(\"\");\n  const [len, setLen] = useState(0);\n  const [topStreamersList, setTopStreamersList] = useState<any>([]);\n  let fetchStreams = async () => {\n    let res = await getStreamers(cursor, GameId);\n    setCursor(res.pagination.cursor);\n    let top = res.data;\n    setLen(len + top.length);\n    setTopStreamersList([\n      ...topStreamersList,\n      top.map((stream: StreamProps) => {\n        return (\n          <TopStream\n            key={stream.user_login}\n            game_name={stream.game_name}\n            language={stream.language}\n            thumbnail_url={stream.thumbnail_url\n              .replace(\"{width}\", \"450\")\n              .replace(\"{height}\", \"254\")}\n            title={stream.title}\n            user_login={stream.user_login}\n            viewer_count={stream.viewer_count}\n            user_id={stream.user_id}\n          />\n        );\n      }),\n    ]);\n  };\n  useEffect(() => {\n    fetchStreams();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return (\n    <>\n      <div className=\"gameName\">{GameName}</div>\n      <InfiniteScroll\n        className=\"topStreamers\"\n        dataLength={len}\n        next={fetchStreams}\n        hasMore={true}\n        loader={<h4>Loading...</h4>}\n        endMessage={\n          <p style={{ textAlign: \"center\" }}>\n            <b>Yay! You have seen it all</b>\n          </p>\n        }\n      >\n        {topStreamersList}\n      </InfiniteScroll>\n    </>\n  );\n};\n","import { useParams } from \"react-router-dom\";\nimport { TwitchEmbed } from \"react-twitch-embed\";\ninterface ParamTypes {\n  Name: string;\n}\nexport const LiveStream = () => {\n  const { Name } = useParams<ParamTypes>();\n  return (\n    <div className=\"streamWrapper\">\n      <div className=\"twitchEmbed\">\n        <TwitchEmbed\n          id=\"twitchEmbed\"\n          channel={Name}\n          theme=\"dark\"\n          width=\"100%\"\n          height=\"100%\"\n          muted\n          withChat={false}\n          onVideoPause={() => console.log(\":(\")}\n        />\n      </div>\n    </div>\n  );\n};\n","import { Navbar } from \"./navbar/Navbar\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  Redirect,\n} from \"react-router-dom\";\nimport { Home } from \"./home/Home\";\nimport { StreamersForGame } from \"./streamersForGame/StreamersForGame\";\nimport { LiveStream } from \"./liveStream/LiveStream\";\n\nexport const App = () => {\n  return (\n    <Router>\n      <div>\n        <Navbar />\n        <Switch>\n          <Redirect exact from=\"/\" to={`${process.env.PUBLIC_URL}/`} />\n          <Route path={`${process.env.PUBLIC_URL}/`} exact>\n            <Home />\n          </Route>\n          <Route\n            path={`${process.env.PUBLIC_URL}/StreamersForGame/:GameName/:GameId`}\n          >\n            <StreamersForGame />\n          </Route>\n          <Route\n            exact\n            path={`${process.env.PUBLIC_URL}/redirect/:GameName/:GameId`}\n            render={(props) => (\n              <Redirect\n                to={`${process.env.PUBLIC_URL}/StreamersForGame/${props.match.params.GameName}/${props.match.params.GameId}`}\n              />\n            )}\n          />\n          <Route path={`${process.env.PUBLIC_URL}/Streamer/:Name`}>\n            <LiveStream />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport {App} from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}